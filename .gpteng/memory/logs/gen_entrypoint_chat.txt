
2024-09-25T14:16:09.314431
================================ System Message ================================

You will get information about a codebase that is currently on disk in the current folder.
The user will ask you to write a script that runs the code in a specific way.
You will answer with code blocks that include all the necessary terminal commands.
Do not install globally. Do not use sudo.
Do not explain the code, just give the commands.
Do not use placeholders, use example values (like . for a folder argument) if necessary.


================================ Human Message =================================


        Make a unix script that
        a) installs dependencies
        b) runs all necessary parts of the codebase (in parallel if necessary)
        
Information about the codebase:

```
File: index.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Admin Dashboard</title>
7     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
8     <link rel="stylesheet" href="styles.css">
9 </head>
10 <body>
11     <div class="container">
12         <h1 class="mt-5">Admin Dashboard</h1>
13         <div id="applications" class="mt-4"></div>
14     </div>
15     <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
16     <script src="https://cdn.jsdelivr.net/npm/bootstrap@4.5.2/dist/js/bootstrap.bundle.min.js"></script>
17     <script src="api.js"></script>
18     <script src="app.js"></script>
19 </body>
20 </html>

File: login.html
1 <!DOCTYPE html>
2 <html lang="en">
3 <head>
4     <meta charset="UTF-8">
5     <meta name="viewport" content="width=device-width, initial-scale=1.0">
6     <title>Admin Login</title>
7     <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
8     <link rel="stylesheet" href="styles.css">
9 </head>
10 <body>
11     <div class="container">
12         <h1 class="mt-5">Admin Login</h1>
13         <form id="loginForm" class="mt-4">
14             <div class="form-group">
15                 <label for="username">Username</label>
16                 <input type="text" class="form-control" id="username" required>
17             </div>
18             <div class="form-group">
19                 <label for="password">Password</label>
20                 <input type="password" class="form-control" id="password" required>
21             </div>
22             <button type="submit" class="btn btn-primary">Login</button>
23         </form>
24     </div>
25     <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
26     <script src="auth.js"></script>
27 </body>
28 </html>

File: app.js
1 document.addEventListener('DOMContentLoaded', function() {
2     if (!localStorage.getItem('token')) {
3         window.location.href = 'login.html';
4     } else {
5         loadApplications();
6     }
7 });
8 
9 function loadApplications() {
10     fetchApplications().then(applications => {
11         const applicationsDiv = document.getElementById('applications');
12         applicationsDiv.innerHTML = '';
13         applications.forEach(application => {
14             const applicationCard = document.createElement('div');
15             applicationCard.className = 'card mt-3';
16             applicationCard.innerHTML = `
17                 <div class="card-body">
18                     <h5 class="card-title">${application.student_name}</h5>
19                     <p class="card-text">Student ID: ${application.student_id}</p>
20                     <p class="card-text">Program: ${application.program}</p>
21                     <p class="card-text">Contact Info: ${application.contact_info}</p>
22                     <p class="card-text">Status: ${application.status}</p>
23                     <button class="btn btn-success" onclick="updateStatus(${application.id}, 'Ready to Collect')">Mark as Ready to Collect</button>
24                     <button class="btn btn-danger" onclick="deleteApplication(${application.id})">Delete</button>
25                 </div>
26             `;
27             applicationsDiv.appendChild(applicationCard);
28         });
29     });
30 }
31 
32 function updateStatus(id, status) {
33     updateApplicationStatus(id, status).then(() => {
34         loadApplications();
35     });
36 }
37 
38 function deleteApplication(id) {
39     deleteApplicationById(id).then(() => {
40         loadApplications();
41     });
42 }

File: auth.js
1 document.getElementById('loginForm').addEventListener('submit', function(event) {
2     event.preventDefault();
3     const username = document.getElementById('username').value;
4     const password = document.getElementById('password').value;
5 
6     login(username, password).then(token => {
7         localStorage.setItem('token', token);
8         window.location.href = 'index.html';
9     }).catch(error => {
10         alert('Login failed: ' + error.message);
11     });
12 });
13 
14 async function login(username, password) {
15     const response = await fetch('http://localhost:3000/api/users/login', {
16         method: 'POST',
17         headers: {
18             'Content-Type': 'application/json'
19         },
20         body: JSON.stringify({ username, password })
21     });
22 
23     if (!response.ok) {
24         throw new Error('Login failed');
25     }
26 
27     const data = await response.json();
28     return data.token;
29 }

File: api.js
1 async function fetchApplications() {
2     const response = await fetch('http://localhost:3000/api/admin/applications', {
3         headers: {
4             'Authorization': 'Bearer ' + localStorage.getItem('token')
5         }
6     });
7 
8     if (!response.ok) {
9         throw new Error('Failed to fetch applications');
10     }
11 
12     return await response.json();
13 }
14 
15 async function updateApplicationStatus(id, status) {
16     const response = await fetch('http://localhost:3000/api/admin/applications/status', {
17         method: 'PUT',
18         headers: {
19             'Content-Type': 'application/json',
20             'Authorization': 'Bearer ' + localStorage.getItem('token')
21         },
22         body: JSON.stringify({ id, status })
23     });
24 
25     if (!response.ok) {
26         throw new Error('Failed to update application status');
27     }
28 }
29 
30 async function deleteApplicationById(id) {
31     const response = await fetch('http://localhost:3000/api/admin/applications', {
32         method: 'DELETE',
33         headers: {
34             'Content-Type': 'application/json',
35             'Authorization': 'Bearer ' + localStorage.getItem('token')
36         },
37         body: JSON.stringify({ id })
38     });
39 
40     if (!response.ok) {
41         throw new Error('Failed to delete application');
42     }
43 }

File: styles.css
1 body {
2     background-color: #f8f9fa;
3 }
4 
5 .container {
6     max-width: 600px;
7 }
8 
9 .card {
10     border: 1px solid #dee2e6;
11     border-radius: 0.25rem;
12 }
13 
14 .card-body {
15     padding: 1.25rem;
16 }
17 
18 .card-title {
19     margin-bottom: 0.75rem;
20 }
21 
22 .card-text {
23     margin-bottom: 0.5rem;
24 }

File: package.json
1 {
2   "name": "gpa-calculator-admin",
3   "version": "1.0.0",
4   "description": "Admin interface for GPA calculator system",
5   "main": "index.html",
6   "scripts": {
7     "start": "live-server"
8   },
9   "dependencies": {
10     "live-server": "^1.2.1"
11   },
12   "author": "",
13   "license": "ISC"
14 }

File: requirements.txt
1 Flask
2 Flask-JWT-Extended
3 Flask-CORS

```

================================== Ai Message ==================================

```sh
#!/bin/bash

# Install Node.js dependencies
npm install

# Install Python dependencies
pip install -r requirements.txt

# Run the backend server
python -m flask run &

# Run the frontend server
npm start &

# Wait for all background processes to finish
wait
```
